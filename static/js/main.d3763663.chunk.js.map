{"version":3,"sources":["components/card/Card.js","components/cardList/CardListComponent.js","components/searchBox/SearchBoxComponent.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","alt","src","monster","id","name","email","CardListComponent","className","monsters","map","key","SearchBoxComponent","placeholder","handleOnChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","user","this","filterMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2UAEaA,G,kBAAO,SAACC,GACrB,OACA,6BACQ,yBAAKC,IAAM,UAAUC,IAAG,+BAA2BF,EAAMG,QAAQC,GAAzC,2BACvB,4BAAKJ,EAAMG,QAAQE,MACpB,2BAAIL,EAAMG,QAAQG,UCHbC,EAAoB,SAAAP,GAC7B,OACG,yBAAKQ,UAAU,kBAEdR,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACvB,kBAAC,EAAD,CAAMQ,IAAOR,EAAQC,GAAID,QAAWA,SCNlCS,G,MAAqB,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,eAAd,OAClC,2BACAN,UAAY,WACZO,KAAO,SACPF,YAAeA,EACfG,SAAYF,MC6BGG,E,kDA/Bb,aAAc,IAAD,8BACX,gBAWDH,eAAgB,SAACI,GAAD,OAAO,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAV1D,EAAKC,MAAO,CACVd,SAAS,GACTW,YAAc,IAJL,E,gEAOQ,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKT,SAAS,CAACV,SAASmB,S,+BAKzC,IAAD,EACiCC,KAAKN,MAA7Bd,EADT,EACSA,SAASW,EADlB,EACkBA,YACVU,EAAiBrB,EAASsB,QAAO,SAAA5B,GAAO,OAC5CA,EAAQE,KAAK2B,cAAcC,SAASb,EAAYY,kBAElD,OACE,6BACD,+CACE,kBAAC,EAAD,CACAnB,YAAc,kBACdC,eAAkBe,KAAKf,iBAEvB,kBAAC,EAAD,CAAmBL,SAAWqB,S,GA5BlBI,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d3763663.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css'\r\nexport const Card = (props) =>{\r\nreturn(\r\n<div >\r\n        <img alt = 'monster' src ={`https://robohash.org/${props.monster.id}?set=set2&size =10*10`}/>\r\n         <h3>{props.monster.name}</h3>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n\r\n)\r\n\r\n}","import React from 'react';\r\nimport './CardListComponent.css';\r\nimport {Card} from '../card/Card'\r\n\r\nexport const CardListComponent = props =>{\r\n    return(\r\n       <div className='flex-container'>\r\n          {\r\n        props.monsters.map(monster =>(\r\n           <Card key = {monster.id} monster = {monster}/>\r\n        \r\n        )\r\n        )\r\n      }\r\n           </div>\r\n    )\r\n\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport './SearchBoxComponent.css';\r\n\r\nexport const SearchBoxComponent = ({placeholder,handleOnChange}) =>\r\n<input\r\nclassName = 'onChange'\r\ntype = 'search'\r\nplaceholder = {placeholder}\r\nonChange = {handleOnChange}\r\n/>\r\n    \r\n","import React, { Component } from 'react';\nimport './App.css';\nimport {CardListComponent} from './components/cardList/CardListComponent';\nimport {SearchBoxComponent} from './components/searchBox/SearchBoxComponent';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state ={\n      monsters:[],\n      searchField : ''\n    } \n   }\n   componentDidMount(){\n     fetch('https://jsonplaceholder.typicode.com/users')\n     .then(response => response.json())\n     .then(user => this.setState({monsters:user}));\n   }\n   handleOnChange =(e) => this.setState({searchField:e.target.value})\n\n   render()\n { \n   const {monsters,searchField} = this.state;\n   const filterMonsters = monsters.filter(monster =>\n     monster.name.toLowerCase().includes(searchField.toLowerCase())\n     );\n   return (\n     <div>\n    <h1>Monster Rolodex</h1>\n      <SearchBoxComponent\n      placeholder = 'Search Monsters'\n      handleOnChange = {this.handleOnChange}\n      />\n      <CardListComponent monsters ={filterMonsters}/>\n    </div>\n   )}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}